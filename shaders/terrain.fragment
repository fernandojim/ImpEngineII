#version 440 core

layout (location = 0) out vec4 vFragColor;

struct light
{
	vec3 lightPosition;
	vec3 lightIntensity;
}; 
uniform light luz1;

struct fogInfo
{
	float maxDist;
	float minDist;
	vec3 fogColor;
};
uniform fogInfo fog1;

struct material
{
	float shininess; //o Ns
	vec3 ka;
	vec3 kd;
	vec3 ks;
	//float Ni;
	//int illum;
	//sampler2D tex_ka;
	sampler2D tex_kd;
	//sampler2D tex_ks;
};
uniform material material1;
uniform material material2;
uniform material material3;
uniform material material4;

uniform float tilingFactorSand;
uniform float tilingFactorGrass;
uniform float tilingFactorDirt;
uniform float tilingFactorSnow;

uniform float altmax;
uniform vec3 camera_pos;

in float altura;
in vec2 texCoord;
smooth in vec3 eyeCoord;
smooth in vec3 eyeNormal;
in vec3 world_coord;
in vec3 world_normal;

//View Projection inverse matrix
uniform mat4 m4vpi;
uniform sampler2D texturafrmb;

void main()
{
	//Crea los colores a partir de las texturas
	vec4 colorsand = texture2D(material1.tex_kd, texCoord * tilingFactorSand);
	vec4 colorgrass = texture2D(material2.tex_kd, texCoord * tilingFactorGrass);
	vec4 colordirtX = texture2D(material3.tex_kd, world_coord.yz * tilingFactorDirt);
	vec4 colordirtY = texture2D(material3.tex_kd, world_coord.xz * tilingFactorDirt);
	vec4 colordirtZ = texture2D(material3.tex_kd, world_coord.xy * tilingFactorDirt);
	vec4 colorsnow = texture2D(material4.tex_kd, texCoord * tilingFactorSnow);
	
	vec3 blend = abs(world_normal);
	blend /= blend.x + blend.y + blend.z + 0.001f;
	vec4 colordirt = blend.x * colordirtX + blend.y * colordirtY + blend.z * colordirtZ;

	vec3 n = normalize( eyeNormal );
    vec3 s = normalize( luz1.lightPosition - eyeCoord );
    vec3 v = normalize( -eyeCoord );
	vec3 h = normalize( v + s );
	
	//Aplica iluminacion a cada color de textura
	colorsand = colorsand   * vec4( luz1.lightIntensity * (material1.ka + material1.kd * max( dot( s, n), 0.0 ) + material1.ks * pow( max( dot( h, n ), 0.0), material1.shininess) ), 1.0);
	colorgrass = colorgrass * vec4( luz1.lightIntensity * (material2.ka + material2.kd * max( dot( s, n), 0.0 ) + material2.ks * pow( max( dot( h, n ), 0.0), material2.shininess) ), 1.0);
	colordirt = colordirt   * vec4( luz1.lightIntensity * (material3.ka + material3.kd * max( dot( s, n), 0.0 ) + material3.ks * pow( max( dot( h, n ), 0.0), material3.shininess) ), 1.0);
	colorsnow = colorsnow   * vec4( luz1.lightIntensity * (material4.ka + material4.kd * max( dot( s, n), 0.0 ) + material4.ks * pow( max( dot( h, n ), 0.0), material4.shininess) ), 1.0);
	
	//Crea el fundido de texturas segun la altura del terreno
	if ( altura < 105.0 )
		vFragColor = colorsand;
	else if ( altura >= 105.0 && altura < 115.0 )
		vFragColor = mix(colorsand, colorgrass, smoothstep(105.0, 115.0, altura));
	else if ( altura < 300.0 )
		vFragColor = colorgrass;
	else if (altura >= 300.0 && altura <= 600.0 )
		vFragColor = mix(colorgrass, colordirt, smoothstep(300.0, 600.0, altura));
	else if ( altura < 1000.0)
		vFragColor = colordirt;
	else if ( altura >= 1000.0 && altura < 1500.0 )
		vFragColor = mix(colordirt, colorsnow, smoothstep(1000.0, 1500.0, altura));
	else
		vFragColor = colorsnow;
	
		
	//Aplies the fog color
	/*float dist = length( eyeCoord );
	float fogFactor = ( fog1.maxDist - dist ) / ( fog1.maxDist - fog1.minDist );
	fogFactor = clamp( fogFactor, 0.0, 1.0 );
	vec3 color = mix( fog1.fogColor, vFragColor.rgb, fogFactor );
	vFragColor = vec4( color, 1.0 );*/
}