#version 440 core

layout (location = 0) out vec4 vFragColor;

struct light
{
	vec3 lightPosition;
	vec3 lightIntensity;
};
uniform light luz1;

struct fogInfo
{
	float maxDist;
	float minDist;
	vec3 fogColor;
};
uniform fogInfo fog1;

struct material
{
	vec3 ka;
	vec3 kd;
	vec3 ks;
	float shininess;
};

uniform int valid_tex;
uniform material material1;

uniform sampler2D textureMeshDiffuse;

in VS_OUT
{
	smooth vec3 eyeCoord;
	smooth vec3 eyeNormal;
	vec2 varyingTexCoord;
} fs_in;

void main()
{
	vec3 n = normalize( fs_in.eyeNormal );
    vec3 s = normalize( luz1.lightPosition - fs_in.eyeCoord );
    vec3 v = normalize( -fs_in.eyeCoord );
	vec3 h = normalize( v + s );

	if ( valid_tex != 0)
	{
		vFragColor = texture(textureMeshDiffuse, fs_in.varyingTexCoord) * vec4( luz1.lightIntensity * (material1.ka + material1.kd * max( dot( s, n), 0.0 ) + material1.ks * pow( max( dot( h, n ), 0.0), material1.shininess) ), 1.0);
	}
	else
		vFragColor = vec4( luz1.lightIntensity * (material1.ka + material1.kd * max( dot( s, n), 0.0 ) + material1.ks * pow( max( dot( h, n ), 0.0), material1.shininess) ), 1.0);
		
	//Aplies the fog color
	float dist = length( fs_in.eyeCoord );
	float fogFactor = ( fog1.maxDist - dist ) / ( fog1.maxDist - fog1.minDist );
	fogFactor = clamp( fogFactor, 0.0, 1.0 );
	vec3 color = mix( fog1.fogColor, vFragColor.rgb, fogFactor );
	vFragColor = vec4( color, 1.0 );
}
